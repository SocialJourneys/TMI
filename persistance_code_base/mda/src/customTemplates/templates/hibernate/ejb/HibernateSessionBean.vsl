#parse("templates/hibernate/ejb/HibernateSessionEJBGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSessionBean.vsl in andromda-hibernate-cartridge.
// Upgraded by Charles Ofoegbu
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

import javax.ejb.EJBException;
import javax.naming.NamingException;

import ${hibernateUtils.hibernatePackage}.HibernateException;
import ${hibernateUtils.hibernatePackage}.Session;
import ${hibernateUtils.hibernatePackage}.SessionFactory;
import ${hibernateUtils.hibernatePackage}.Transaction;

import ${customTypesPackage}.HibernateUtils;

#foreach ($serviceRef in $service.serviceReferences)
import ${serviceRef.targetElement.fullyQualifiedName}Home;
#end

/**
$service.getDocumentation(" * ")
 */
public abstract class ${service.name}Bean
#if ($service.generalization)
    extends ${service.generalization.fullyQualifiedName}BeanImpl
#end
    /*Commented out by Charles Ofoegbu. Do not implement this interface. Just leave it out let us run only Hibernate implements javax.ejb.SessionBean*/
{

#if ($service.ejbStateful)
    // --------------- attributes ---------------------
#foreach ( $attribute in $service.attributes )
#set ($attributeTypeName = $attribute.type.fullyQualifiedName)

   protected $attributeTypeName $attribute.name;

   /**
$attribute.getDocumentation("     * ")
    */
    public $attributeTypeName ${attribute.getterName}()
    {
        return $attribute.name;
    }

    public void ${attribute.setterName}($attributeTypeName newValue)
    {
        $attribute.name = newValue;
    }

#end
#end
    // ---------------- business methods  ----------------------
#foreach ($operation in $service.operations)
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $operation.typedArgumentList)
#if ($stringUtils.isBlank($parameterList))
#set ($parameters = "${hibernateUtils.hibernatePackage}.Session session")
#else
#set ($parameters = "${hibernateUtils.hibernatePackage}.Session session, ${parameterList}")
#end
#if ($operation.exceptionsPresent)
    protected abstract $operation.returnType.fullyQualifiedName handle${stringUtils.capitalize(${operation.name})} ($parameters)
        throws $operation.exceptionList;
#else
    protected abstract $operation.returnType.fullyQualifiedName handle${stringUtils.capitalize(${operation.name})} ($parameters);
#end

    /**
$operation.getDocumentation("     * ")
     */
    $operation.visibility $operation.returnType.fullyQualifiedName $operation.signature
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
##
##  Add one additional parameter to the list of parameters:
##  a reference to the open Hibernate session.
##
#set ($parameterList = $operation.argumentNames)
#if ($stringUtils.isBlank($parameterList))
#set ($parameters = "session")
#else
#set ($parameters = "session, ${parameterList}")
#end
##
#if ($operation.returnTypePresent)
			/*$operation.returnType.fullyQualifiedName ${stringUtils.uncapitalize(${operation.returnType.name})}Var = handle${stringUtils.capitalize($operation.name)}($parameters);*/
			$operation.returnType.fullyQualifiedName avariable = handle${stringUtils.capitalize($operation.name)}($parameters);
			tx.commit();
            //return ${stringUtils.uncapitalize(${operation.returnType.name})}Var;
			return avariable;
#else
            handle${stringUtils.capitalize($operation.name)}($parameters);			
			tx.commit();
#end
        }
#foreach ( $exception in $operation.exceptions )
        catch ($exception.fullyQualifiedName e)
        {
		if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    throw he;
                }
        	}
           throw e;
        }
#end
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.${operation.name} ", new Exception(th.toString(), th));
        }
        finally
        {
            /* commented  out by Charles Ofoegbu. We are not using the session facade pattern hence this part could be replaced by below!
			*/
			if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }

#end

    // ---------------- internal crud business methods  ----------------------
##foreach ($serviceRef in $service.allEntityReferences)
#set ($target = $serviceRef.targetElement)
#set ($parameters = "${hibernateUtils.hibernatePackage}.Session session, java.lang.Object record")
#set ($aParameter = "${hibernateUtils.hibernatePackage}.Session session, java.lang.Long recordId")
#set ($singleParameter = "${hibernateUtils.hibernatePackage}.Session session")

#set ($parametersString = "session, record")
#set ($aParameterString = "session, recordId")
#set ($singleParameterString = "session")
#set ($criteriaParam = "${hibernateUtils.hibernatePackage}.Criteria criteria")
	
	// ------ improved DSL methods added by Charles Ofoegbu -------------------
    protected abstract java.lang.Object handleCreateNewRecord($parameters ,  uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail);
	protected abstract void handleUpdateRecord($parameters, uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail);
	protected abstract void handleDeleteRecord($parameters, uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail);
	protected abstract java.util.Collection handleGetAllRecords($singleParameter, java.lang.Class clazz);
	protected abstract java.util.Collection handleGetAllRecords($singleParameter, java.lang.Class clazz, int pageIndex, int pageSize);
	protected abstract java.lang.Object handleGetRecordById($singleParameter, java.lang.Class clazz, java.lang.Long refId);
	
	//improved KP (Key Performance) and flexible methods for developers
	protected abstract java.lang.Object handleGetUniqueRecordByHQL($singleParameter, java.lang.String hql);
	protected abstract java.util.Collection handleGetAllRecordsByHQL($singleParameter, java.lang.String hql);
	protected abstract java.util.Collection handleGetAllRecordsByHQL($singleParameter, java.lang.String hql, int pageIndex, int pageSize);
	protected abstract java.util.Collection handleGetAllRecordsByParameterId($singleParameter, java.lang.Class manyClass, java.lang.Class oneClass, java.lang.Long parameterId, int pageIndex, int pageSize);
	protected abstract java.util.Collection handleGetAllRecordsByTwoParameterIds($singleParameter, java.lang.Class manyClass, java.lang.Class firstOneClass, java.lang.Class secondOneClass, java.lang.Long firstParameterId, java.lang.Long secondParameterId, java.lang.String strOperator, int pageIndex, int pageSize);
	
	//overloaded Create, update and Delete (Useful for swing impl and impl without user action and audit trail requirement)
	protected abstract java.lang.Object handleCreateNewRecord($parameters);
	protected abstract void handleUpdateRecord($parameters);
	protected abstract void handleDeleteRecord($parameters);
	
	//auxiliary method to get a Criteria object
	protected abstract org.hibernate.Criteria handleGetCriteriaObject($singleParameter, java.lang.Class clazz);
		
	//improved KP methods to get results sets using criteria
	protected abstract java.lang.Object handleGetUniqueRecordByCriteria($singleParameter, $criteriaParam);
	protected abstract java.util.Collection handleGetAllRecordsByCriteria($singleParameter, $criteriaParam);

    public java.lang.Object createNewRecord(java.lang.Object record,  uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.lang.Object newRecord = handleCreateNewRecord($parametersString, aTrail);
			tx.commit();
			return newRecord;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.createNewRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public void updateRecord(java.lang.Object record,  uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			handleUpdateRecord($parametersString, aTrail);
			tx.commit();			
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.updateRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public void deleteRecord(java.lang.Object record ,  uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			handleDeleteRecord($parametersString, aTrail);
			tx.commit();			
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.deleteRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	public java.util.Collection getAllRecords(java.lang.Class clazz)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecords($singleParameterString, clazz);
			tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getAllRecords ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public java.util.Collection getAllRecords(java.lang.Class clazz, int pageIndex, int pageSize)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecords($singleParameterString, clazz, pageIndex, pageSize);
			tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getAllRecords ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public java.lang.Object getRecordById(java.lang.Class clazz, java.lang.Long recordId)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.lang.Object retObject = handleGetRecordById($singleParameterString, clazz, recordId);
			tx.commit();
			return retObject;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getRecordById ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	

##end
   
   // ---------------- Key Performance and flexibility Methods ------------- 
   public java.lang.Object getUniqueRecordByHQL(java.lang.String hql)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.lang.Object newRecord = handleGetUniqueRecordByHQL($singleParameterString, hql);
			tx.commit();
			return newRecord;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getUniqueRecordByHQL ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	//
	
	public java.util.Collection getAllRecordsByHQL(java.lang.String hql)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecordsByHQL($singleParameterString, hql);
			tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getAllRecordsByHQL ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	
	public java.util.Collection getAllRecordsByHQL(java.lang.String hql, int pageIndex, int pageSize)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecordsByHQL($singleParameterString, hql, pageIndex, pageSize);
			tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getAllRecordsByHQL ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public java.util.Collection getAllRecordsByParameterId(java.lang.Class manyClass, java.lang.Class oneClass, java.lang.Long parameterId, int pageIndex, int pageSize)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecordsByParameterId($singleParameterString, manyClass, oneClass, parameterId, pageIndex, pageSize);
			tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getAllRecordsByParameterId ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	
	public java.util.Collection getAllRecordsByTwoParameterIds(java.lang.Class manyClass, java.lang.Class firstOneClass, java.lang.Class secondOneClass, java.lang.Long firstParameterId, java.lang.Long secondParameterId, java.lang.String strOperator, int pageIndex, int pageSize)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction(); 
			java.util.Collection retCollection = handleGetAllRecordsByTwoParameterIds($singleParameterString, manyClass, firstOneClass, secondOneClass, firstParameterId, secondParameterId, strOperator, pageIndex, pageSize);
			tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getAllRecordsByTwoParameterIds ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	 public java.lang.Object createNewRecord(java.lang.Object record)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.lang.Object newRecord = handleCreateNewRecord($parametersString);
			tx.commit();
			return newRecord;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.createNewRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public void updateRecord(java.lang.Object record)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			handleUpdateRecord($parametersString);
			tx.commit();			
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.updateRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public void deleteRecord(java.lang.Object record)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			handleDeleteRecord($parametersString);
			tx.commit();			
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.deleteRecord ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public org.hibernate.Criteria getCriteriaObject(java.lang.Class clazz)
    {
        Session session = null;
		org.hibernate.Criteria retCriteria = null;
        
		try{			
			session = getSession();			
			retCriteria = handleGetCriteriaObject($singleParameterString, clazz);			
		}catch (javax.naming.NamingException nex){
            nex.printStackTrace();
        }
		return 	retCriteria;
        
    }
	
	public void executeHQLUpdate(java.lang.String hql, java.util.Map<java.lang.String, java.lang.Object> queryParameters){
		Session session = null;
		try {
			session = getSession();
			Transaction tx = session.beginTransaction();
			org.hibernate.Query query = session.createQuery(hql);
			for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : queryParameters.entrySet()) {
				//System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
				query.setParameter(entry.getKey(), entry.getValue());
			}
			query.executeUpdate();
			tx.commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
		} catch (NamingException e) {
			e.printStackTrace();
		}finally{
			if (session != null){
				try{
					session.close();
				}catch (HibernateException he){
					he.printStackTrace();
				}
			}
		}
    }
	
	public java.lang.Object getUniqueRecordByCriteria($criteriaParam)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.lang.Object newRecord = handleGetUniqueRecordByCriteria($singleParameterString, criteria);
			tx.commit();
			return newRecord;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getUniqueRecordByCriteria ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
	public java.util.Collection getAllRecordsByCriteria($criteriaParam)
    {
        Session session = null;
		Transaction tx = null;
        try{			
			session = getSession();			
			tx = session.beginTransaction();
			java.util.Collection retCollection = handleGetAllRecordsByCriteria($singleParameterString, criteria);
			tx.commit();
			return retCollection;
       }
        catch (Throwable th)
        {
			if(tx != null){
        		try{
        			tx.rollback();
        		}catch (HibernateException he)
                {
                    //throw he;
                }
        	}
            throw new EJBException("${service.name}Bean.getAllRecordsByCriteria ", new Exception(th.toString(), th));
        }
        finally
        {
            if (session != null)
			{
        		try
				{
        			session.close();
        		}
				catch (HibernateException he)
                {
                    he.printStackTrace();
                }
        	}
        }
    }
	
  
  
/*
*/
   // ---------------- Hibernate helpers -------------------------

    /*
	*/
	/**Added by Charles Ofoegbu. Use this to get the session from the hibernate utility class*/
	private Session getSession() throws HibernateException, NamingException
    {		
        return HibernateUtils.getSessionFactory().openSession();
    }
	
    // ---------------- accessor methods for (session!) bean references ---------------
#foreach ( $serviceRef in $service.serviceReferences )
   #set ($service = $serviceRef.targetElement)
   #set ($homeInterfaceName = "${service.name}Home")
   /**
    * This is to get the reference to the ${service.name} bean.
    * Obtains local home interface from default initial context
    * @return Local home interface for ${service.name}. Lookup using bean ref name.
    */
	/* Commented out by Charles Ofoegbu
    protected static $homeInterfaceName get${homeInterfaceName}() throws NamingException
    {
        javax.naming.InitialContext initialContext = new javax.naming.InitialContext();
        try
        {
            // Local homes shouldn't be narrowed, as there is no RMI involved.
            $homeInterfaceName home = (${homeInterfaceName}) initialContext.lookup("java:comp/env/ejb/${service.name}BeanRef");
            return home;
        }
        finally
        {
            initialContext.close();
        }
    }*/

#end

}