#parse("templates/hibernate/ejb/HibernateSessionEJBGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSessionEJBLocator.vsl in andromda-hibernate-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($customTypesPackage))
package $customTypesPackage;
#set ($generatedFile = "${stringUtils.replace($customTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName
{
    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private static $serviceLocatorName instance;

    private $serviceLocatorName()
    {
        // shouldn't be instantiated
    }

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final $serviceLocatorName getInstance()
    {
        if (instance == null)
        {
            instance = new $serviceLocatorName();
        }
        return instance;
    }
	/*
    private static Object lookupHome(
        java.util.Hashtable environment,
        String jndiName,
        Class narrowTo) throws javax.naming.NamingException
    {
        javax.naming.InitialContext initialContext = new javax.naming.InitialContext(
            environment);
        try
        {
            Object object = initialContext.lookup(jndiName);
            // only narrow if necessary
            if (narrowTo.isInstance(java.rmi.Remote.class))
            {
                object = javax.rmi.PortableRemoteObject
                    .narrow(object, narrowTo);
            }
            return object;
        }
        finally
        {
            initialContext.close();
        }
    }
	*/
	
#foreach ($service in $services)
#set ($home = "${stringUtils.uncapitalize($service.name)}Home")
#set ($homeClassName = "${service.fullyQualifiedName}Home")
    private static $homeClassName $home = null;

    /**
     * Gets an instance of <code>$service.fullyQualifiedName</code>
     */
    public final $service.fullyQualifiedName get${service.name}()
    {
        try
        {
		/* Commented out by Charles Ofoegbu. We are not using session facade design pattern hence we do not need this part!
            if ($home == null)
            {
                $home = ($homeClassName)lookupHome(
                    null,
                    ${homeClassName}.JNDI_NAME,
                    ${homeClassName}.class);
            }
            return ${home}.create();
		*/
		/*I have modified this to look like this. Let it simply instantiate itself from the ${service.fullyQualifiedName}BeanImpl class which of
		course, implements the $service.fullyQualifiedName interface. */
			$service.fullyQualifiedName service = new ${service.fullyQualifiedName}BeanImpl();
			return service;
        }
        catch (Exception ex)
        {
            throw new javax.ejb.EJBException(ex);
        }
    }

#if ($service.ejbRemoteView)
    /**
     * Gets an instance of <code>$service.fullyQualifiedName</code>
     *
     * @param environment the environment for InitialContext
     * @return an instance of $service.fullyQualifiedName
     */
	 /* Commented out by Charles Ofoegbu. Again, we do not need this!
    public final $service.fullyQualifiedName get${service.name}(java.util.Hashtable environment)
    {
        try
        {
            $home = ($homeClassName)lookupHome(
                    environment,
                    ${homeClassName}.JNDI_NAME,
                    ${homeClassName}.class);
            return ${home}.create();
        }
        catch (Exception ex)
        {
            throw new javax.ejb.EJBException(ex);
        }
    }
	*/

#end
#end
}