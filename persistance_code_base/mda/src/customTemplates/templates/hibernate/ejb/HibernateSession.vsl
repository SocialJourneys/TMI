#parse("templates/hibernate/ejb/HibernateSessionEJBGlobals.vm")
#set ($generatedFile = "${service.fullyQualifiedNamePath}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSession.vsl in andromda-hibernate-cartridge.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

// all the imports in the system -wyze
#foreach ($serviceRef in $service.allEntityReferences)
import	$serviceRef.targetElement.fullyQualifiedName;
#end

/**
 * @see $service.fullyQualifiedName
 */
public interface $service.name
#if ($service.generalization)
    //extends $service.generalization.fullyQualifiedName
#else
    //extends $ejbInterface
#end
{	//-----------------internal crud methods --------------------
	## Generate the associations
##foreach ($serviceRef in $service.allEntityReferences)
##set ($target = $serviceRef.targetElement)

     //upgraded by Charles Ofoegbu
	//-----------------------General crud methods for all Entity----------------------
	/**this method creates a new Record. Irrespective of the Entity's Class. It throws an exception if there is a problem*/
    public java.lang.Object createNewRecord(java.lang.Object newRecord,  uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail);
	
	/**this method updates an existing Record. Irrespective of the Entity's Class. It throws an exception if there is a problem*/
    public void updateRecord(java.lang.Object existingRecord,  uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail);
	
	/**this method deletes an existing Record. Irrespective of the Entity's Class. It throws an exception if there is a problem*/
    public void deleteRecord(java.lang.Object existingRecord,  uk.ac.dotrural.irp.ecosystem.tweetdeck.entity.audittrail.AuditTrail aTrail);
	
	/**this method returns an object of the specified by clazz paramter using the supplied id. It throws an exception if there is a problem*/
    public java.lang.Object getRecordById(java.lang.Class clazz, java.lang.Long recordId);
	
	/**this method returns collection of the records, specified by the clazz parameter. It throws an exception if there is a problem*/
    public java.util.Collection getAllRecords(java.lang.Class clazz);	
	
	/**this method returns collection of the records, specified by the clazz parameter that is within the pageIndex and pageSize. It throws an exception if there is a problem*/
    public java.util.Collection getAllRecords(java.lang.Class clazz, int pageIndex, int pageSize);	
	
##end

	//improved KP (Key Performance) methods for developers
	/**this method returns a unique object; accepts hql string as parameter*/
    public java.lang.Object getUniqueRecordByHQL(java.lang.String hql);
	
	/**this method returns a collection of objects; accepts hql string as parameter*/
    public java.util.Collection getAllRecordsByHQL(java.lang.String hql);
	
	/**this method returns a collection of objects; accepts hql string as parameter*/
    public java.util.Collection getAllRecordsByHQL(java.lang.String hql, int pageIndex, int pageSize);

	/**this method returns a collection of objects from a many to one mapping;*/
    public java.util.Collection getAllRecordsByParameterId(java.lang.Class manyClass, java.lang.Class oneClass, java.lang.Long parameterId, int pageIndex, int pageSize);
	
	/**this method returns a collection of objects from a many to one mapping; where the many object has two CMRs*/
    public java.util.Collection getAllRecordsByTwoParameterIds(java.lang.Class manyClass, java.lang.Class firstOneClass, java.lang.Class secondOneClass, java.lang.Long firstParameterId, java.lang.Long secondParameterId, java.lang.String strOperator, int pageIndex, int pageSize);
	
	//Overloaded create, update and delete (Useful for swing impl and impl without user action and audit trail requirement)
	/**this method creates a new Record. Irrespective of the Entity's Class. It throws an exception if there is a problem*/
    public java.lang.Object createNewRecord(java.lang.Object newRecord);
	
	/**this method updates an existing Record. Irrespective of the Entity's Class. It throws an exception if there is a problem*/
    public void updateRecord(java.lang.Object existingRecord);
	
	/**this method deletes an existing Record. Irrespective of the Entity's Class. It throws an exception if there is a problem*/
    public void deleteRecord(java.lang.Object existingRecord);
	
	//auxiliary method to get a Criteria object
	public org.hibernate.Criteria getCriteriaObject(java.lang.Class clazz);
		
	/**this method executes the hibernate query. It throws an exception if there is a problem*/
    public void executeHQLUpdate(java.lang.String hql, java.util.Map<java.lang.String, java.lang.Object> queryParameters);
	
	//methods to return results using criteria as the parameter
	/**this method returns a unique object; acceptscriteria object as parameter*/
    public java.lang.Object getUniqueRecordByCriteria(org.hibernate.Criteria criteria);
	
	/**this method returns a collection of objects; accepts criteria object as parameter*/
    public java.util.Collection getAllRecordsByCriteria(org.hibernate.Criteria criteria);
	
	
	
    // ---------------- business methods  ----------------------
#foreach ($operation in $service.operations)
## Only expose public methods
#if ($operation.visibility.equalsIgnoreCase("public"))
#set ($throwsList = $operation.exceptionList)
#if ($service.ejbRemoteView)
#set ($throwsList = $operation.getExceptionList('java.rmi.RemoteException'))
#end
   /**
$operation.getDocumentation("    * ")
    */
#if ($operation.exceptionsPresent)
    public $operation.returnType.fullyQualifiedName $operation.signature
        throws $throwsList;
#else
#if ($service.ejbRemoteView)
    public $operation.returnType.fullyQualifiedName $operation.signature
        throws java.rmi.RemoteException;
#else
    public $operation.returnType.fullyQualifiedName $operation.signature;
#end
#end
#end

#end
}