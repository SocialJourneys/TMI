// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateUtils.vsl in andromda-hibernate-cartridge.
//
#set ($className = "HibernateUtils")
#set ($generatedFile = "$stringUtils.replace($customTypesPackage, '.', '/')/${className}.java")
package $customTypesPackage;

import javax.naming.InitialContext;
import javax.naming.NamingException;

import ${hibernateUtils.hibernatePackage}.HibernateException;
import ${hibernateUtils.hibernatePackage}.SessionFactory;
import ${hibernateUtils.hibernatePackage}.cfg.Configuration;

public class $className
{
	private static final SessionFactory schedulerSessionFactory;
	
    static
    {
        try
        {
			
			/* Save the session factory that is built in this initializer*/
            schedulerSessionFactory = new Configuration().configure().buildSessionFactory();
        }
        catch (HibernateException ex)
        {
            throw new RuntimeException(ex);
        }
    }

    public static SessionFactory getSessionFactory() throws NamingException
    {
        /* Commented out by Charles Ofoegbu. Let us simply return the instance of this session factory that has been created by the static initializer
		SessionFactory schedulerSessionFactory = null;
        InitialContext ctx= new InitialContext();
        try
        {
            schedulerSessionFactory = (SessionFactory)ctx.lookup("$hibernateJndiName");
        }
        finally
        {
            ctx.close();
        }
		*/
        return schedulerSessionFactory;
    }
}